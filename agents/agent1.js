const { GoogleGenerativeAI } = require('@google/generative-ai');

// O nome do modelo foi atualizado para uma vers√£o est√°vel e robusta.
const MODELO_GEMINI = "gemini-2.5-pro";

// Configura√ß√£o do Google Gemini
// Assumimos que a vari√°vel de ambiente GEMINI_API_KEY foi carregada no arquivo principal.
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Categorias de despesas (mantidas aqui por serem parte integral da l√≥gica do prompt)
const CATEGORIAS_DESPESAS = [
    'INSUMOS AGR√çCOLAS',
    'MANUTEN√á√ÉO E OPERA√á√ÉO',
    'RECURSOS HUMANOS',
    'SERVI√áOS OPERACIONAIS',
    'INFRAESTRUTURA E UTILIDADES',
    'ADMINISTRATIVAS',
    'SEGUROS E PROTE√á√ÉO',
    'IMPOSTOS E TAXAS',
    'INVESTIMENTOS'
];

/**
 * Fun√ß√£o principal para processar um buffer de PDF diretamente com o Gemini.
 * @param {Buffer} pdfBuffer - O buffer de dados do arquivo PDF.
 * @returns {Promise<Object>} Os dados extra√≠dos no formato JSON.
 */
async function processPDFWithGemini(pdfBuffer) {
    try {
        console.log(`ü§ñ Processando PDF diretamente com Gemini (${MODELO_GEMINI})...`);

        const model = genAI.getGenerativeModel({ model: MODELO_GEMINI });

        // O prompt inteiro com as instru√ß√µes detalhadas
        const prompt = `Voc√™ √© um especialista em an√°lise de notas fiscais brasileiras (NFe). Analise este documento PDF de uma nota fiscal e extraia EXATAMENTE os seguintes dados em formato JSON v√°lido.

INSTRU√á√ïES CR√çTICAS:
- Use 'null' se a informa√ß√£o n√£o for encontrada
- Para datas, use formato YYYY-MM-DD
- Para valores monet√°rios, use apenas n√∫meros (sem R$ e v√≠rgulas, use somente ponto para separador para casas decimais, exemplo: 3012,00 vira 3012.00)
- Para CNPJ/CPF, mantenha apenas n√∫meros
- Para classifica√ß√£o de despesa, analise os produtos/servi√ßos e escolha UMA categoria mais adequada

ATEN√á√ÉO ESPECIAL - N√ÉO CONFUNDA ESTES CAMPOS:
- N√öMERO DA NOTA FISCAL: Aparece como "NF-e N¬∞:" ou "N¬∞:" seguido de n√∫meros (exemplo: "000.207.590")
- CNPJ DO FORNECEDOR: Formato XX.XXX.XXX/XXXX-XX (exemplo: "18.944.113/0002-91") - geralmente na se√ß√£o do emitente/fornecedor
- CNPJ/CPF DO DESTINAT√ÅRIO: Na se√ß√£o "DESTINAT√ÅRIO/REMETENTE"

ESTRUTURA T√çPICA DE UMA NFe:
1. CABE√áALHO: Cont√©m o n√∫mero da NFe (N¬∞:)
2. EMITENTE/FORNECEDOR: Raz√£o social, CNPJ do fornecedor
3. DESTINAT√ÅRIO: Nome e CNPJ/CPF de quem recebe
4. PRODUTOS/SERVI√áOS: Descri√ß√£o e valores
5. TOTAIS: Valor total da nota

CATEGORIAS DE DESPESAS DISPON√çVEIS:
${CATEGORIAS_DESPESAS.map((cat, index) => `${index + 1}. ${cat}`).join('\n')}

FORMATO DE RESPOSTA (JSON):
{
    "fornecedor": {
        "razao_social": "string ou null (nome da empresa emitente)",
        "fantasia": "string ou null (nome fantasia se houver)", 
        "cnpj": "apenas n√∫meros ou null (CNPJ da empresa EMITENTE/FORNECEDORA)"
    },
    "faturado": {
        "nome_completo": "string ou null (nome do DESTINAT√ÅRIO)",
        "cpf": "apenas n√∫meros ou null (CPF/CNPJ do DESTINAT√ÅRIO)"
    },
    "numero_nota_fiscal": "string ou null (n√∫mero que aparece ap√≥s 'N¬∞:' ou 'NF-e N¬∞:')",
    "data_emissao": "YYYY-MM-DD ou null",
    "descricao_produtos": "descri√ß√£o detalhada dos produtos/servi√ßos ou null",
    "quantidade_parcelas": 1,
    "data_vencimento": "YYYY-MM-DD ou null", 
    "valor_total": "n√∫mero ou null (valor em centavos, ex: 344900 para R$ 3.449,00)",
    "classificacao_despesa": "uma das categorias acima ou null"
}

EXEMPLOS PARA EVITAR CONFUS√ÉO:
- Se vir "N¬∞: 000.207.590", ent√£o numero_nota_fiscal = "000207590"
- Se vir CNPJ "18.944.113/0002-91" na se√ß√£o do emitente, ent√£o fornecedor.cnpj = "18944113000291"
- Se vir CPF "709.046.011-88" na se√ß√£o destinat√°rio, ent√£o faturado.cpf = "70904601188"

RESPOSTA: Retorne APENAS o JSON v√°lido, sem coment√°rios, explica√ß√µes ou formata√ß√£o markdown.`;

        // Converte o buffer do PDF para base64
        const pdfBase64 = pdfBuffer.toString('base64');

        // Cria o objeto de arquivo para o Gemini (√© aqui que o PDF √© enviado)
        const filePart = {
            inlineData: {
                data: pdfBase64,
                mimeType: 'application/pdf'
            }
        };

        const result = await model.generateContent([prompt, filePart]);
        const response = await result.response;
        let text = response.text().replace(/```json|```/g, '').trim();

        // Extrai apenas o JSON da resposta (Garante que s√≥ o JSON seja parseado)
        const jsonMatch = text.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
            text = jsonMatch[0];
        }

        const extractedData = JSON.parse(text);
        console.log('‚úÖ Dados processados com sucesso pelo Gemini');

        return extractedData;
    } catch (error) {
        console.error('‚ùå Erro no processamento Gemini:', error);
        throw new Error(`Falha no processamento IA: ${error.message}`);
    }
}

// Fun√ß√£o auxiliar para exemplos de categorias (mantida por ser √∫til ao agente ou rotas de informa√ß√£o)
function getCategoryExamples(category) {
    const examples = {
        'INSUMOS AGR√çCOLAS': ['Sementes', 'Fertilizantes', 'Defensivos Agr√≠colas', 'Corretivos'],
        'MANUTEN√á√ÉO E OPERA√á√ÉO': ['Combust√≠veis', 'Lubrificantes', 'Pe√ßas', 'Manuten√ß√£o de M√°quinas'],
        'RECURSOS HUMANOS': ['M√£o de Obra Tempor√°ria', 'Sal√°rios e Encargos'],
        'SERVI√áOS OPERACIONAIS': ['Frete', 'Transporte', 'Colheita Terceirizada'],
        'INFRAESTRUTURA E UTILIDADES': ['Energia El√©trica', 'Arrendamento', 'Constru√ß√µes'],
        'ADMINISTRATIVAS': ['Honor√°rios Cont√°beis', 'Despesas Banc√°rias'],
        'SEGUROS E PROTE√á√ÉO': ['Seguro Agr√≠cola', 'Seguro de Ativos'],
        'IMPOSTOS E TAXAS': ['ITR', 'IPTU', 'IPVA', 'INCRA-CCIR'],
        'INVESTIMENTOS': ['M√°quinas', 'Implementos', 'Ve√≠culos', 'Im√≥veis']
    };

    return examples[category] || [];
}

// Exporta as fun√ß√µes e constantes necess√°rias para o server.js
module.exports = {
    processPDFWithGemini,
    MODELO_GEMINI,
    CATEGORIAS_DESPESAS,
    getCategoryExamples
};